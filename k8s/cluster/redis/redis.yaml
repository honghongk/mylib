# https://codecollector.tistory.com/1474


# 도메인을 IP로 바꿔야함
# nslookup redis-cluster-7.redis-cluster.test-honghong.svc.cluster.local|grep Address |tail -n1 |cut -d: -f2


# 클러스터 한번에 세팅
# 아이피:포트 써야함
# 전체가 클라이언트에서 접근 할 수 있어야함
# redis-cli --cluster create \
# 10.42.0.155:6379 10.42.0.156:6379 10.42.0.157:6379 10.42.0.158:6379 10.42.0.159:6379 10.42.0.160:6379 \
# --cluster-yes --cluster-replicas 1
# 자동 yes      마스터당 레플리카 1


# 클라이언트 접속  다른노드 데이터도 보려면 -c 붙여야함
# redis-cli -c -h 127.0.0.1 -p 5001
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster
  namespace: test-honghong
  labels:
    app: redis-cluster
data:
  fix-ip.sh: |
    #!/bin/sh
    CLUSTER_CONFIG="/data/nodes.conf"
    if [ -f ${CLUSTER_CONFIG} ]; then
      if [ -z "${POD_IP}" ]; then
        echo "Unable to determine Pod IP address!"
        exit 1
      fi
      echo "Updating my IP to ${POD_IP} in ${CLUSTER_CONFIG}"
      sed -i.bak -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${CLUSTER_CONFIG}
    fi
    exec "$@"
  slave.conf: |+
    ################################# REPLICATION #################################
    # slaveof <masterip> <masterport>
    # masterauth <master-password>

    slave-serve-stale-data yes
    slave-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    # repl-ping-slave-period 10
    # repl-timeout 60
    repl-disable-tcp-nodelay no
    # repl-backlog-size 1mb
    # repl-backlog-ttl 3600
    slave-priority 100

    # min-slaves-to-write 3
    # min-slaves-max-lag 10

    # slave-announce-ip 5.5.5.5
    # slave-announce-port 1234
  redis.conf: |+
    ################################ REDIS CLUSTER  ###############################
    cluster-enabled yes
    
    # 밀리초 다운여부 판단
    cluster-node-timeout 5000
    # 클러스터 노드 상태 정보
    cluster-config-file /data/nodes.conf
    # 클러스터 일부 노드 다운될때 설정  yes(데이터 정합성) | no   
    cluster-require-full-coverage no
    # 마스터에 딸린 최소 슬레이브 수
    cluster-migration-barrier 1
    # failover 조건
    cluster-replica-validity-factor 10
    # 슬레이브가 마스터에 핑
    repl-ping-slave-period 10

    ################################## NETWORK #####################################

    # bind 192.168.1.100 10.0.0.1
    # bind 127.0.0.1 ::1
    bind 0.0.0.0
    protected-mode no
    port 6379

    tcp-backlog 511

    # unixsocket /tmp/redis.sock
    # unixsocketperm 700

    timeout 0
    tcp-keepalive 300

    ################################# GENERAL #####################################

    daemonize no
    supervised no
    pidfile /var/run/redis.pid
    databases 16

    #################################### LOG #####################################
    # debug verbose notice warning
    loglevel notice
    logfile /var/log/redis.log

    syslog-enabled yes
    syslog-ident redis
    syslog-facility local0
    ################################## SLOW LOG ###################################
    slowlog-log-slower-than 10000
    slowlog-max-len 128

    ################################ SNAPSHOTTING  ################################

    save 900 1
    save 300 10
    save 60 10000

    stop-writes-on-bgsave-error yes

    rdbcompression yes
    rdbchecksum yes

    dbfilename dump.rdb

    dir /data

    ############################## APPEND ONLY MODE ###############################


    appendonly no
    appendfilename "appendonly.aof"

    # appendfsync always
    appendfsync everysec
    # appendfsync no

    no-appendfsync-on-rewrite no

    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb

    aof-load-truncated yes

    ################################## SECURITY ###################################

    # requirepass foobared

    # rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
    # rename-command CONFIG ""


    ################################### LIMITS ####################################
    # maxclients 10000
    # maxmemory <bytes>

    # volatile-lru -> remove the key with an expire set using an LRU algorithm
    # allkeys-lru -> remove any key according to the LRU algorithm
    # volatile-random -> remove a random key with an expire set
    # allkeys-random -> remove a random key, any key
    # volatile-ttl -> remove the key with the nearest expire time (minor TTL)
    # noeviction -> don't expire at all, just return an error on write operations
    #
    # The default is:
    # maxmemory-policy noeviction

    # maxmemory-samples 5

    ################################ LUA SCRIPTING  ###############################

    lua-time-limit 5000

    ################################ LATENCY MONITOR ##############################

    latency-monitor-threshold 0

    ############################# EVENT NOTIFICATION ##############################

    # PUBLISH __keyspace@0__:foo del
    # PUBLISH __keyevent@0__:del foo
    #
    #
    #  K     Keyspace events, published with __keyspace@<db>__ prefix.
    #  E     Keyevent events, published with __keyevent@<db>__ prefix.
    #  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
    #  $     String commands
    #  l     List commands
    #  s     Set commands
    #  h     Hash commands
    #  z     Sorted set commands
    #  x     Expired events (events generated every time a key expires)
    #  e     Evicted events (events generated when a key is evicted for maxmemory)
    #  A     Alias for g$lshzxe, so that the "AKE" string means all the events.
    #
    #  notify-keyspace-events Ex
    #
    notify-keyspace-events ""

    ############################### ADVANCED CONFIG ###############################

    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64

    # -5: max size: 64 Kb  <-- not recommended for normal workloads
    # -4: max size: 32 Kb  <-- not recommended
    # -3: max size: 16 Kb  <-- probably not recommended
    # -2: max size: 8 Kb   <-- good
    # -1: max size: 4 Kb   <-- good
    list-max-ziplist-size -2

    # 0: disable all list compression
    # 1: depth 1 means "don't start compressing until after 1 node into the list,
    #    going from either the head or tail"
    #    So: [head]->node->node->...->node->[tail]
    #    [head], [tail] will always be uncompressed; inner nodes will compress.
    # 2: [head]->[next]->node->node->...->node->[prev]->[tail]
    #    2 here means: don't compress head or head->next or tail->prev or tail,
    #    but compress all nodes between them.
    # 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]
    # etc.
    list-compress-depth 0

    set-max-intset-entries 512

    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64

    hll-sparse-max-bytes 3000

    activerehashing yes

    # normal -> normal clients including MONITOR clients
    # slave  -> slave clients
    # pubsub -> clients subscribed to at least one pubsub channel or pattern
    #
    # client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
    #
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit slave 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60

    hz 10

    aof-rewrite-incremental-fsync yes



---
# apiVersion: v1
# kind: Service
# metadata:
#   name: redis-cluster
#   namespace: test-honghong
#   labels:
#     app: redis-cluster
# spec:
#   ports:
#   - port: 6379
#     targetPort: 6379
#     name: client
#   - port: 16379
#     targetPort: 16379
#     name: gossip
#   type: ClusterIP
#   selector:
#     app: redis-cluster

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: test-honghong
  name: redis-cluster
  labels:
    app: redis-cluster
spec:
  storageClassName: "nfs-csi"
  resources:
    requests:
      storage: 10Gi
  accessModes: ["ReadWriteOnce"]


---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: test-honghong
  labels:
    app: redis-cluster
spec:
  podManagementPolicy: Parallel
  # serviceName: redis-cluster
  replicas: 6
  revisionHistoryLimit: 10
  minReadySeconds: 0

  # 기본값 Retain 실서비스도 Retain 테스트에만 Delete
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Delete
  # 뒤에붙는 번호 시작
  ordinals:
    start: 0

  selector:
    matchLabels:
      app: redis-cluster
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      partition: 1
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7.0.11-alpine
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        command: ["/conf/fix-ip.sh", "redis-server", "/conf/redis.conf"]
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
          initialDelaySeconds: 10
          timeoutSeconds: 10
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
          initialDelaySeconds: 10
          periodSeconds: 10
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        # metadata.name  metadata.namespace metadata.ownerReferences[0].name  + svc.cluster.local
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: true
        - name: data
          mountPath: /data
          readOnly: false
      volumes:
      - name: conf
        configMap:
          name: redis-cluster
          defaultMode: 0755
      # - name: data
      #   persistentVolumeClaim:
      #     claimName: redis-cluster

  volumeClaimTemplates: 
  - metadata:
      name: data
      labels:
        name: redis-cluster
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: nfs-csi
      resources:
        requests:
          storage: 100Mi
